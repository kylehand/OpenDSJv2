IPT_Qos_Performance <- read.csv("~/Dropbox/data hack/Data Samples/IPT_Qos_Performance.csv")
View(IPT_Qos_Performance)
IPT_Qos_Performance
IPT_Traffic
IPT_Traffic <- read.csv("~/Dropbox/data hack/Data Samples/IPT_Traffic.csv")
IPT_Traffic
summary(IPT_Traffic)
head(IPT_Traffic)
summary(IPT_Traffic$SPEED.Mpbs.)
hist(IPT_Traffic$SPEED.Mpbs.)
table(IPT_Traffic$SPEED.Mpbs.)
cor(IPT_Traffic$SPEED.Mpbs., IPT_Traffic$MINIMUM_COMMITMENT.Mbps.)
IPT_Traffic$Extra <- IPT_Traffic$SPEED.Mpbs. - IPT_Traffic$MINIMUM_COMMITMENT.Mbps.
summary(IPT_Traffic$Extra)
IPT_Traffic$Extra
sum(IPT_Traffic$Extra)
sum(IPT_Traffic$SPEED.Mpbs.)
Mobility_Signaling_Operator_Traffic <- read.csv("/Volumes/Windows/DataHack14/VivekAnalyses/Data Samples/Mobility_Signaling_Operator_Traffic.csv")
View(Mobility_Signaling_Operator_Traffic)
Mobility_Signaling_Operator_Traffic <- read.csv("/Volumes/Windows/DataHack14/VivekAnalyses/Data Samples/Mobility_Signaling_Operator_Traffic.csv")
str(Mobility_Signaling_Operator_Traffic)
head(Mobility_Signaling_Operator_Traffic)
str(Mobility_Signaling_Operator_Traffic)
head(Mobility_Signaling_Operator_Traffic)
str(Mobility_Signaling_Operator_Traffic$ORIGINATION_NETWORK_ID)
str(Mobility_Signaling_Operator_Traffic$DESTINATION_NETWORK_ID)
str(Mobility_Signaling_Operator_Traffic)
str(Mobility_Signaling_Operator_Traffic$ORIGINATION_COUNTRY)
sum(Mobility_Signaling_Operator_Traffic$OUTBOUND_MESSAGES)
Mobility_Signaling_Peering_Traffic <- read.csv("~/Dropbox/data hack/Data Samples/Mobility_Signaling_Peering_Traffic.csv")
View(Mobility_Signaling_Peering_Traffic)
Mobility_Signaling_Peering_Traffic <- read.csv("~/Dropbox/data hack/Data Samples/Mobility_Signaling_Peering_Traffic.csv")
Mobility_Signaling_Peering_Traffic
head(Mobility_Signaling_Peering_Traffic)
str(Mobility_Signaling_Peering_Traffic)
table(Mobility_Signaling_Peering_Traffic$OUTBOUND_MESSAGES)
hist(Mobility_Signaling_Peering_Traffic$OUTBOUND_MESSAGES)
head(Mobility_Signaling_Peering_Traffic)
str(Mobility_Signaling_Peering_Traffic)
str(Mobility_Signaling_Peering_Traffic)
table(Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID, )
table(Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID)
subset(Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID = "iBN0")
subset(Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID == "iBN0")
?subset
subset(Mobility_Signaling_Peering_Traffic, Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID == "iBN0")
table(Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID)
Mobility_Signaling_Peering_Traffic
View(Mobility_Signaling_Operator_Traffic)
table(Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID)
Mobility_Signaling_Peering_Traffic
subset(Mobility_Signaling_Peering_Traffic, Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID == "iBN0")
Mobility_Signaling_Peering_Traffic
sum(Mobility_Signaling_Peering_Traffic$OUTBOUND_MESSAGES)
sum(Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES)
?aggregate
aggregate(Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID, Mobility_Signaling_Peering_Traffic$OUTBOUND_MESSAGES)
aggregate(Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID, Mobility_Signaling_Peering_Traffic$OUTBOUND_MESSAGES, sum)
aggregate(Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID)
aggregate(Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID ~ Mobility_Signaling_Peering_Traffic$OUTBOUND_MESSAGES, data = Mobility_Signaling_Peering_Traffic, FUN=sum)
str(Mobility_Signaling_Peering_Traffic)
str(Mobility_Signaling_Peering_Traffic)
aggregate(Mobility_Signaling_Peering_Traffic$OUTBOUND_MESSAGES ~ Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID, data = Mobility_Signaling_Peering_Traffic, FUN=sum)
aggregate(Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES ~ Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID, data = Mobility_Signaling_Peering_Traffic, FUN=sum)
View(Mobility_Signaling_Operator_Traffic)
table(aggregate(Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES ~ Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID, data = Mobility_Signaling_Peering_Traffic, FUN=sum))
aggregate(Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES ~ Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID, data = Mobility_Signaling_Peering_Traffic, FUN=sum)
INBOUND<-aggregate(Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES ~ Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID, data = Mobility_Signaling_Peering_Traffic, FUN=sum)
OUTBOUNBD<-aggregate(Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES ~ Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID, data = Mobility_Signaling_Peering_Traffic, FUN=sum)
OUTBOUND<-aggregate(Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES ~ Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID, data = Mobility_Signaling_Peering_Traffic, FUN=sum)
OUTBOUND
str(OU)
str(OUTBOUND)
rm(OUTBOUNBD)
OUTBOUND
?sort
?order
?order
str(OUTBOUND)
order(OUTBOUND, OUTBOUND$Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES)
str(OUTBOUND)
OUTBOUND[order(OUTBOUND$Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES)]
OUTBOUND[order(OUTBOUND$Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES),]
OUTBOUND[,order(OUTBOUND$Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES)]
OUTBOUND[order(OUTBOUND$Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES),]
OUTBOUND
str(OUTBOUND)
OUTBOUND[order(OUTBOUND$Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES),]
attach(OUTBOUND)
detach(OUTBOUND)
INBOUND
?INBOUND
INBOUND
OUTBOUND[order(OUTBOUND),]
OUTBOUND[order(OUTBOUND$Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES),]
OUTBOUND
str(OUTBOUND)
OUTBOUND[order(OUTBOUND$Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES),]
OUTBOUND[,order(OUTBOUND$Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES)]
OUTBOUND[,order(Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES)]
attach(OUTBOUND)
OUTBOUND[,order(Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES)]
OUTBOUND[,order(OUTBOUND$Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES)]
OUTBOUND<-aggregate(Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES ~ Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID, data = Mobility_Signaling_Peering_Traffic, FUN=sum)
OUTBOUND
INBOUND
OUTBOUND[,order(OUTBOUND$Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES)]
OUTBOUND$Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES
OUTBOUND<-aggregate(Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES ~ Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID, data = Mobility_Signaling_Peering_Traffic, FUN=sum)
OUTBOUND
STR(OUTBOUND)
STR(OUTBOUND)
Str(OUTBOUND)
str(OUTBOUND)
OUTBOUND$Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES
OUTBOUND[,1]
OUTBOUND[,2]
OUTBOUND[,order(OUTBOUND[,2]]
OUTBOUND[,order(OUTBOUND[,2]),]
OUTBOUND[order(OUTBOUND[,2]),]
?order
OUTBOUND[order(OUTBOUND[,2], decreasing=FALSE),]
OUTBOUND[order(OUTBOUND[,2], decreasing=TRUE),]
OUTBOUND <-  OUTBOUND[order(OUTBOUND[,2], decreasing=TRUE),]
OUTBOUND
OUTBOUND[1:10,]
topCustomers <- OUTBOUND[1:10,][2]
OUTBOUND[1:10,][2]
OUTBOUND[1:10,][1]
topcustomers <- OUTBOUND[1:10,][1]
topcustomer
topcustomers
OUTBOUND<-aggregate(Mobility_Signaling_Peering_Traffic$OUTBOUND_MESSAGES ~ Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID, data = Mobility_Signaling_Peering_Traffic, FUN=sum)
INBOUND<-aggregate(Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES ~ Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID, data = Mobility_Signaling_Peering_Traffic, FUN=sum)
topCustomersOut <- OUTBOUND[1:10,][1]
INBOUND <- INBOUND[order(INBOUND[,2], decreasing=TRUE),]
INBOUND[1:10,]
topCustomersIn
topCustomersIn <- INBOUND[1:10,][1]
topCustomersIn
update('arules')
update("arules")
install.packages("arules")
data("Adult")
library('arules')
data("Adult")
r1 <- apriori(Adult[1:1000], parameter = list(support = 0.5))
r1 <- apriori(Adult[1:1000], parameter = list(support = 0.5))
r2 <- apriori(Adult[1001:2000], parameter = list(support = 0.5))
r_comb <- c(r1, r2)
duplicated(r_comb)
data("Groceries")
s <- Groceries[,itemFrequency(Groceries)>0.05]
d_jaccard <- dissimilarity(s, which = "items")
plot(hclust(d_jaccard, method = "ward"))
## cluster transactions for a sample of Adult
data("Adult")
s <- sample(Adult, 500)
## calculate Jaccard distances and do hclust
d_jaccard <- dissimilarity(s)
hc <- hclust(d_jaccard)
plot(hc)
## get 20 clusters and look at the difference of the item frequencies (bars)
## for the top 20 items) in cluster 1 compared to the data (line)
assign <- cutree(hc, 20)
itemFrequencyPlot(s[assign==1], population=s, topN=20)
## calculate affinity-based distances and do hclust
d_affinity <- dissimilarity(s, method = "affinity")
hc <- hclust(d_affinity)
plot(hc)
## cluster rules
rules <- apriori(Adult, parameter=list(support=0.3))
rules <- subset(rules, subset = lift > 2)
## use affinity
## we need to supply the item affinities from the dataset (sample)
d_affinity <- dissimilarity(rules, method = "affinity",
args = list(affinity = affinity(s)))
plot(hclust(d_affinity))
plot(hclust(d_affinity))
data("Adult")
rules <- apriori(Adult,
parameter = list(supp = 0.5, conf = 0.9,
target = "rules"))
summary(rules)
Adult
summary(adult)
summary(Adult)
str(Adult)
options(java.parameters = "-Xm30000m")
library(zipcode)
library(plyr)
library(rJava)
require(xlsx)
require(XLConnect)
file <- system.file("efile_CSJ_2014", "efile_CSJ_2014.xlsx", package = "xlsx")
res <- read.xlsx(file, 1) # read the second sheet
options(java.parameters = "-Xmx1024m")
library(XLConnect)
setwd('~/Github/OpenDSJv2/R/hurtmedata/')
wb1 <- loadWorkbook("efile_newest_CSJ_2014.xlsx")
A.contri <- readWorksheet(wb1, sheet = 1)
A.contri
str(A.contri)
View(A.contri)
A.Contributions.Table.1 <- read.csv("~/Github/OpenDSJv2/R/hurtmedata/A-Contributions.csv", stringsAsFactors=FALSE)
A.Contributions.Table.1 <- A.contri
mayor2013<-efile_newest_CSJ_2013_A_contributions
efile_newest_CSJ_2013_A_contributions <- read.csv("~/Github/OpenDSJv2/R/efile_newest_CSJ_2013_A_contributions.csv", stringsAsFactors=FALSE)
mayor2013<-efile_newest_CSJ_2013_A_contributions
mayor2014 <- A.Contributions.Table.1
str(mayor2013)
str(mayor2014)
sys.time()
Sys.time()
Sys.time()
Sys.time()
Sys.time()
Sys.time()
Sys.time()
str(mayor2013)
mayor2013$Tran_Date <- as.Date(as.character(combo$Tran_Date), "%m/%d/%Y")
str(mayor2014)
str(mayor2014$Thru_Date)
dates <- str(mayor2014$Thru_Date)
dates
dates <- mayor2014$Thru_Date
dates
dates <- mayor2014$Thru_Date
dates
okay <- as.date(dates)
okay <- as.Date(dates)
okay
str(okay)
str(mayor2013$Tran_Date)
mayor2013
str(mayor2013)
str(mayor2013)
mayor2013$Tran_Date <- as.Date(as.character(mayor2013$Tran_Date), "%m/%d/%Y")
mayor2013$Rpt_Date <- as.Date(as.character(mayor2013$Rpt_Date), "%m/%d/%Y")
mayor2013$From_Date <- as.Date(as.character(mayor2013$From_Date), "%m/%d/%Y")
mayor2013
str(mayor2013)
mayor2013$Tran_Date <- as.Date(as.character(mayor2013$Thru_Date), "%m/%d/%Y")
str(mayor2013)
mayor2013$Thru_Date <- as.Date(as.character(mayor2013$Thru_Date), "%m/%d/%Y")
mayor2013$Rpt_Date <- as.Date(as.character(mayor2013$Rpt_Date), "%m/%d/%Y")
mayor2013$From_Date <- as.Date(as.character(mayor2013$From_Date), "%m/%d/%Y")
mayor2013
str(mayor2013)
efile_newest_CSJ_2013_A_contributions <- read.csv("~/Github/OpenDSJv2/R/efile_newest_CSJ_2013_A_contributions.csv", stringsAsFactors=FALSE)
mayor2013<-efile_newest_CSJ_2013_A_contributions
mayor2013$Thru_Date <- as.Date(as.character(mayor2013$Thru_Date), "%m/%d/%Y")
mayor2013$Rpt_Date <- as.Date(as.character(mayor2013$Rpt_Date), "%m/%d/%Y")
mayor2013$From_Date <- as.Date(as.character(mayor2013$From_Date), "%m/%d/%Y")
str(mayor2013)
mayor2014$Thru_Date <- as.Date(mayor2014$Thru_Date)
mayor2014$Rpt_Date <- as.Date(mayor2014$Rpt_Date)
mayor2014$From_Date <- as.Date(mayor2014$From_Date)
str(mayor2014)
str(mayor2014$Thru_Date)
str(mayor2013$Thru_Date)
combo <- data.frame(stringsAsFactors=FALSE)
combo <- rbind(mayor2013, mayor2014)
combo$Tran_Zip4
combo$Tran_Zip4 <- as.character(combo$Tran_Zip4)
for(i in 1:nrow(combo)) {                 #takes a few mins
if(nchar(combo$Tran_Zip4[i]) == 6)    #looking for cases only when zipcode is 6 char long
{
combo$Tran_Zip4[i] <- gsub("-.*","",combo$Tran_Zip4[i])
}
}
combo$Tran_Zip4 <- clean.zipcodes(combo$Tran_Zip4)
str(combo)
mayor2013$Tran_Date <- as.Date(as.character(mayor2013$Tran_Date), "%m/%d/%Y")
mayor2014$Tran_Date <- as.Date(mayor2014$Tran_Date)
mayor2014
combo <- data.frame(stringsAsFactors=FALSE)
combo <- rbind(mayor2013, mayor2014)
combo$Tran_Zip4
combo$Tran_Zip4 <- as.character(combo$Tran_Zip4)
for(i in 1:nrow(combo)) {                 #takes a few mins
if(nchar(combo$Tran_Zip4[i]) == 6)    #looking for cases only when zipcode is 6 char long
{
combo$Tran_Zip4[i] <- gsub("-.*","",combo$Tran_Zip4[i])
}
}
combo$Tran_Zip4 <- clean.zipcodes(combo$Tran_Zip4)
somemayors <- data.frame(combo$Filer_NamL, combo$Filer_ID, combo$Rpt_Date, combo$From_Date, combo$Tran_Date, combo$Tran_ID, combo$Tran_NamL, combo$Tran_Zip4, combo$Tran_City, combo$Tran_State, combo$Tran_Amt1)
library(zipcode)
library(plyr)
library(Hmisc)
combo$Tran_Zip4 <- clean.zipcodes(combo$Tran_Zip4)
somemayors <- data.frame(combo$Filer_NamL, combo$Filer_ID, combo$Rpt_Date, combo$From_Date, combo$Tran_Date, combo$Tran_ID, combo$Tran_NamL, combo$Tran_Zip4, combo$Tran_City, combo$Tran_State, combo$Tran_Amt1)
combo
str(combo)
somemayors <- data.frame(combo$Filer_NamL, combo$Filer_ID, combo$Rpt_Date, combo$From_Date, combo$Tran_Date, combo$Tran_ID, combo$Tran_NamL, combo$Tran_Zip4, combo$Tran_City, combo$Tran_State, combo$Tran_Amt1)
somemayors
mayors <- rename(somemayors, c("combo.Filer_NamL"="Cands", "combo.Filer_ID"="ID", "combo.Rpt_Date"="RDate", "combo.From_Date" = "FDate", "combo.Tran_Date"="TDate",  "combo.Tran_ID" = "TranID","combo.Tran_NamL" = "TranName",
"combo.Tran_Zip4"="Zip", "combo.Tran_City"="City", "combo.Tran_State"="State", "combo.Tran_Amt1"="Amt1"))
mayors
mayors
str(mayors)
mayors$State
str(mayors)
primaryCandidates <- aggregate(Amt1 ~ Zip + ID + TDate,
data = mayors[(mayors$TDate <= cutOffDate),], FUN = sum)
cutOffDate <- as.Date(as.character("2014-06-05"))  #The date has to be input in YYYY-MM-DD format
primaryCandidates <- aggregate(Amt1 ~ Zip + ID + TDate,
data = mayors[(mayors$TDate <= cutOffDate),], FUN = sum)
primaryColorBucket <- as.numeric(cut2(primaryCandidates$Amt1, g = 7))
color <- numeric()
color[1:7] = c('#ffffb2', '#fed976', '#feb24c', '#fd8d3c','#fc4e2a', '#e31a1c',  '#b10026')
newColors <- ifelse(primaryColorBucket==1, color[1],
ifelse(primaryColorBucket == 2, color[2],
ifelse(primaryColorBucket == 3, color[3],
ifelse(primaryColorBucket == 4, color[4],
ifelse(primaryColorBucket == 5, color[5],
ifelse(primaryColorBucket == 6, color[6],
color[7]))))))
primaryCandidates[5] <- newColors
colnames(primaryCandidates)[5] <-'color'
primaryCandidates$TDate <- max(primaryCandidates$TDate)
primaryCandidate$Tdate
primaryCandidate$TDate
primaryCandidates$TDate
nguyen <- primaryCandidates[primaryCandidates$ID == 1359805, ]
nguyen$firstCol <- "primary"
nguyen$secCol <- "Nguyen"
nguyen$ID <- NULL
nguyen <- nguyen[ , c(5, 6, 2, 1, 3, 4)] #Reorder
liccardo <- primaryCandidates[primaryCandidates$ID == 1361139, ]
liccardo$firstCol <- "primary"
liccardo$secCol <- "Liccardo"
liccardo$ID <- NULL
liccardo <- liccardo[ , c(5, 6, 2, 1, 3, 4)] #Reorder
oliverio <- primaryCandidates[primaryCandidates$ID == 1362117, ]
oliverio$firstCol <- "primary"
oliverio$secCol <- "Oliverio"
oliverio$ID <- NULL
oliverio <- oliverio[ , c(5, 6, 2, 1, 3, 4)] #Reorder
cortese <- primaryCandidates[primaryCandidates$ID == 1362187, ]
cortese$firstCol <- "primary"
cortese$secCol <- "Cortese"
cortese$ID <- NULL
cortese <- cortese[ , c(5, 6, 2, 1, 3, 4)] #Reorder
herrera <- primaryCandidates[primaryCandidates$ID == 1362068, ]
herrera$firstCol <- "primary"
herrera$secCol <- "Herrera"
herrera$ID <- NULL
herrera <- herrera[ , c(5, 6, 2, 1, 3, 4)] #Reorder
runOffCandidates <- aggregate(Amt1 ~ Zip + ID + TDate,
data = mayors, FUN = sum)
primaryColorBucket <- numeric()
primaryColorBucket <- as.numeric(cut2(runOffCandidates$Amt1, g = 7))
newColors <- ifelse(primaryColorBucket==1, color[1],
ifelse(primaryColorBucket == 2, color[2],
ifelse(primaryColorBucket == 3, color[3],
ifelse(primaryColorBucket == 4, color[4],
ifelse(primaryColorBucket == 5, color[5],
ifelse(primaryColorBucket == 6, color[6],
color[7]))))))
runOffCandidates[5] <- newColors
colnames(runOffCandidates)[5] <-'color'
runOffCandidates$TDate <- max(runOffCandidates$TDate)
liccardoRunOff <- runOffCandidates[runOffCandidates$ID == 1361139, ]
liccardoRunOff$firstCol <- "runoff"
liccardoRunOff$secCol <- "Liccardo"
liccardoRunOff$ID <- NULL
liccardoRunOff <- liccardoRunOff[ , c(5, 6, 2, 1, 3, 4)] #Reorder
corteseRunOff <- primaryCandidates[runOffCandidates$ID == 1362187, ]
corteseRunOff$firstCol <- "runoff"
corteseRunOff$secCol <- "Cortese"
corteseRunOff$ID <- NULL
corteseRunOff <- corteseRunOff[ , c(5, 6, 2, 1, 3, 4)] #Reorder
summaryInfo <- rbind(nguyen, liccardo, oliverio, cortese, herrera, liccardoRunOff, corteseRunOff)
write.table(summaryInfo, "summaryInfo.txt", quote=FALSE, sep="," , row.names=FALSE, col.names=FALSE)
getwd() #find summaryInfo.txt
write.table(summaryInfo, "summaryInfo.txt", quote=FALSE, sep="," , row.names=FALSE, col.names=FALSE)
getwd() #find summaryInfo.txt
somemayors
str(somemayors)
cutOffDate <- as.Date(as.character("2014-06-05"))  #The date has to be input in YYYY-MM-DD format
options(java.parameters = "-Xmx1024m")
library(zipcode)
library(plyr)
library(Hmisc)
#A.Contributions.Table.1 <- read.csv("~/Dropbox/opendisclosure/City Data/2014_CSJ/A-Contributions-Table 1.csv", stringsAsFactors=FALSE)
#efile_newest_CSJ_2013_A_contributions <- read.csv("~/Dropbox/opendisclosure/City Data/2013_CSJ/efile_newest_CSJ_2013_A_contributions.csv", stringsAsFactors=FALSE)
A.Contributions.Table.1 <- read.csv("~/Github/OpenDSJv2/R/hurtmedata/A-Contributions.csv", stringsAsFactors=FALSE)
efile_newest_CSJ_2013_A_contributions <- read.csv("~/Github/OpenDSJv2/R/efile_newest_CSJ_2013_A_contributions.csv", stringsAsFactors=FALSE)
A.Contributions.Table.1 <- read.csv("~/Github/OpenDSJv2/R/hurtmedata/A-Contributions.csv", stringsAsFactors=FALSE)
efile_newest_CSJ_2013_A_contributions <- read.csv("~/Github/OpenDSJv2/R/efile_newest_CSJ_2013_A_contributions.csv", stringsAsFactors=FALSE)
library(XLConnect)
setwd('~/Github/OpenDSJv2/R/hurtmedata/')
wb1 <- loadWorkbook("efile_newest_CSJ_2014.xlsx")
